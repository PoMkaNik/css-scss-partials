/// === auto-resizing ===
/// npm rfs
/// https://www.npmjs.com/package/rfs

// settings
//  $rfs-unit: rem !default;

// Factor of decrease
// $rfs-factor: 10 !default;

// Breakpoint at where values start decreasing if screen width is smaller
// $rfs-breakpoint: 1200px !default;
// $rfs-breakpoint-unit: px !default;

// Mode. Possibilities: "min-media-query", "max-media-query"
// $rfs-mode: min-media-query !default;

// scss
// .title {
//   @include font-size(4rem);
// }

// Generated css
// .title {
//   font-size: calc(1.525rem + 3.3vw);
// }

// @media (min-width: 1200px) {
//   .title {
//     font-size: 4rem;
//   }
// }

/// An equivalent of `zip` function but for maps.
/// Takes two lists, the first for keys, second for values.
/// @param {List} $keys - Keys for map
/// @param {List} $values - Values for map
/// @return {Map} Freshly created map
/// @see http://sass-lang.com/documentation/Sass/Script/Functions.html#zip-instance_method
@function map-zip($keys, $values) {
  $l-keys: length($keys);
  $l-values: length($values);
  $min: min($l-keys, $l-values);
  $map: ();

  @if $l-keys != $l-values {
    @warn "There are #{$l-keys} key(s) for #{$l-values} value(s) in the map for `map-zip`. "
        + "Resulting map will only have #{$min} pairs.";
  }

  @if $min == 0 {
    @return $map;
  }

  @for $i from 1 through $min {
    $map: map-merge(
      $map,
      (
        nth($keys, $i): nth($values, $i),
      )
    );
  }

  @return $map;
}

// Themes
/* themes */
$themes: (
  // $theme-key: $theme-class-name
  theme-light: theme--light,
  theme-dark: theme--dark
);

// $map: Define the name of the map where all values come from.
// $object: In this case the key for the theme.
// $style: The property for the style which is needed.

@function setStyle($map, $object, $style) {
  @if map-has-key($map, $object) {
    @return map-get(map-get($map, $object), $style);
  }
  @warn "The key ´#{$object} is not available in the map.";
  @return null;
}

// _m-buttons.scss
// 1.Config
// keys must be the same as in $themes map
$config: (
  theme-light: (
    background: #f2f2f2,
    color: #000,
  ),
  theme-dark: (
    background: #666,
    color: #fff,
  ),
);

// 2.Base
.m-button {
  @each $theme-key, $theme-class-name in $themes {
    @if map-has-key($config, $theme-key) {
      .#{$theme-class-name} & {
        // TODO
        // [code] check if any --modifiers exists
        // [code] add additional iterations for different btn --modifiers
        // else ->
        background: setStyle($config, $theme-key, background);
        color: setStyle($config, $theme-key, color);
      }
    } @else {
      @warn "The key ´#{$theme-key} isn’t defined in the map $config´";
    }
  }
}
